#dictionary
d={'key1':'value1'}
d.update({'name':'username'})
d.update({'branch':'cse'})
d.update({'sec':'B'})
d
o/p:{'key1': 'value1', 'name': 'username', 'branch': 'cse', 'sec': 'B'}
    
    d={'key':'value1'}
for i in d:
    print(i)
for i in d:
    print(d[i])
o/p:key
value1

d={}
l=[]
for i in range(5):
    d.update({'key1':input(),'key2':input()})
    l.append(d)
print(l)
o/p:
1
2
3
4
5
6
7
8
9
99
[{'key1': '9', 'key2': '99'}, {'key1': '9', 'key2': '99'}, {'key1': '9', 'key2': '99'}, {'key1': '9', 'key2': '99'}, {'key1': '9', 'key2': '99'}]

l=[]
for i in range(5):
    d={}
    d.update({'key1':input(),'key2':input()})
    l.append(d)
print(l)
o/p:
1
2
3
4
5
6
7
8
9
99
[{'key1': '1', 'key2': '2'}, {'key1': '3', 'key2': '4'}, {'key1': '5', 'key2': '6'}, {'key1': '7', 'key2': '8'}, {'key1': '9', 'key2': '99'}]

db=[{'abc@ex.com':'abc'},{'xyz@ex.com':'xyz'},{'a123@ex.com':'123'},{'x989@ex.com':'x989'}]
for i in db:
    print(i.keys(),i.values())
    print(i.items())
o/p:
dict_keys(['abc@ex.com']) dict_values(['abc'])
dict_items([('abc@ex.com', 'abc')])
dict_keys(['xyz@ex.com']) dict_values(['xyz'])
dict_items([('xyz@ex.com', 'xyz')])
dict_keys(['a123@ex.com']) dict_values(['123'])
dict_items([('a123@ex.com', '123')])
dict_keys(['x989@ex.com']) dict_values(['x989'])
dict_items([('x989@ex.com', 'x989')])

db=[{'abc@ex.com':'abc'},{'xyz@ex.com':'xyz'},{'a123@ex.com':'123'},{'x989@ex.com':'x989'}]
username=input()
password=input()
temp={username:password}
if temp in db:
    print('found')
else:
    print('not found')
o/p:
a123@ex.com
123
found


#Arrays and Strings
row=3
col=3
arr=[]
for i in range(row):
    element=[]
    for j in range(col):
        element.append((int(input("enter element:"))))
    arr.append(element)
print(arr)
o/p:
enter element:1
enter element:2
enter element:3
enter element:4
enter element:5
enter element:6
enter element:7
enter element:8
enter element:9
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]


#add 
row=3
col=3
arr1=[]
for i in range(row):
    temp=list(map(int,input().split()))
    arr1.append(temp)
print(arr1)
arr2=[]
for i in range(row):
    temp=list(map(int,input().split()))
    arr2.append(temp)
print(arr2)
print('\n')
res=[[0 for j in range(col)]for i in range(row)]
for i in range(row):
    for j in range(col):
        res[i][j]=arr1[i][j]+arr2[i][j]
    print(res)
o/p:
    1 2 3 
4 5 6 
7 8 9
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
11 22 33
44 55 66
77 88 99
[[11, 22, 33], [44, 55, 66], [77, 88, 99]]


[[12, 24, 36], [0, 0, 0], [0, 0, 0]]
[[12, 24, 36], [48, 60, 72], [0, 0, 0]]
[[12, 24, 36], [48, 60, 72], [84, 96, 108]]



row=3
col=3
arr1=[]
for i in range(row):
    temp=list(map(int,input().split()))
    arr1.append(temp)
print(arr1)
for i in range(row):
    for j in range(col):
        print(arr1[j][i],end='')
    print()
    
o/p:
1 2 3
4 5 6
7 8 9
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
147
258
369



#list comprehension
res=[[int(input()) for j in range(2)]for i in range(2)]
res

o/p:
1
2
3
4
[[1, 2], [3, 4]]


#slicing
col=4
l=[1,2,3,4,5,6,7,8,9]
print(l)
print(l[0:5])
print(l[1:])
print(l[::])

o/p:
    
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5]
[2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]



s="pavani kaj"
print(s)
res=s.split(' ')        #splitting
print('-'.join(res))     #joining with '-'
print(s.title())
print(s.upper())
print(s.count("a"))
print(s.isalnum())
print(s.isalpha())  #if string doesn't have space it will give o/p true

o/p:
pavani kaj
pavani-kaj
Pavani Kaj
PAVANI KAJ
3
False
False



#concat
first="i am "
age=21
last=" years old"
print(first+str(age)+last)

o/p:
i am 21 years old



num=10
print("the square of {} is {:.6f}".format(num,num*num))              #format method
print("the square of {:6} is {:.6f}".format(num,num*num))
print(f'the square of {num} is {num*num}')

o/p:
    
the square of 10 is 100.000000
the square of     10 is 100.000000
the square of 10 is 100



a=int(input())
b=int(input())
v=input()
if v=="+":
    print(a+b)
elif v=="-":
    print(a-b)
elif v=="*":
    print(a*b)
elif v=="/":
    try:
        print(a/b)
    except:
        print("not divisible by zero")
else:
    print("invalid")
    
o/p:
    
14
0
/
not divisible by zero



l=[]
for i in range(5):
    l.append(int(input()))
print(*l)

o/p:
1
2
3
4
5
1 2 3 4 5



l=list(map(int,input().split()))[:5]
print(*l)

o/p:
1 2 3 4 5 6 
1 2 3 4 5



try:
    arr=list(map(int,input().split('')))
    print(arr)
except:
    print('enter integer input')
    
o/p:
10,000 0 20 1 2 3
enter integer input:
print(eval("1+3/5*9//10"))
1.0


#functions
#1.regular func
#2.default value func
#3.keyword argument func:gives values to variables while calling function
#4.variable length func


#1
def isprime(n):
    for i in range(2,int(n**0.5)+1):         
        if n%i==0:
            return 0
    return 1
n=int(input())
if(isprime(n)==1):
    print("prime")
else:
    print("not a prime")
    
o/p:
23
prime



def isprime(n):
    for i in range(2,n//2):
        if n%i==0:
            return 0
    return 1
n=int(input())
if(isprime(n)==1):
    print("prime")
else:
    print("not a prime")
    
o/p:
        
235
not a prime



#2
def add(n1,n2=0):
    return n1+n2
a=10
b=10
res=add(a)
print(res)

o/p:
10



def add(n1,n2):
    return n1+n2
a=10
b=10
res=add(a,b)
print(res)

o/p:
20


#3
def add(a,b,c,d):
    print(a,b,c,d)
add(c=100,b=80,a=3,d=90)

o/p:
3 80 100 90



#4 variable length argument takes any number of arguments
def add(*abc):
    print(abc)
add(10,30,50,70)

o/p:
(10, 30, 50, 70)



def add(a,b,*abc):
    res=1                   #whenever we use variable length argument make sure it is last argument
    print(a)
    print(b)
    for i in abc:
        res*=i
    return res
print(add(10,20,3,4,5))

o/p:
10
20
60


#recursion
def check(n):
    print(n)
    if(n>0):
        check(n-1)
check(5)
o/p:
    
5
4
3
2
1
0



def my_function(**kid):
    print("My first name is "+kid["fname"])
my_function(fname="kaja",lname="pavani")

o/p:
My first name is kaja

